
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <sys/wait.h>

void forkexample()
{
    if (fork() == 0)
        printf("Hello from Child!\n");
    else
        printf("Hello from Parent!\n");
}

int main()
{
    // fork example
    forkexample();

    // exec example
    pid_t pid;
    int status;
    char *argv_list[] = { "ls", NULL };
    pid = fork();
    if (pid == -1)
    {
        printf("can't fork, error occurred\n");
        exit(EXIT_FAILURE);
    }
    else if (pid == 0)
    {
        printf("child process, pid = %u\n", getpid());
        execv("ls", argv_list);
        exit(0);
    }
    else
    {
        printf("parent process, pid = %u\n", getppid());
        if (waitpid(pid, &status, 0) > 0)
        {
            if (WIFEXITED(status) && !WEXITSTATUS(status))
                printf("program execution successful\n");
            else if (WIFEXITED(status) && WEXITSTATUS(status))
            {
                if (WEXITSTATUS(status) == 127)
                {
                    printf("execv failed\n");
                }
                else
                    printf("program terminated normally,"
                           " but returned a non-zero status\n");
            }
            else
                printf("program didn't terminate normally\n");
        }
        else
        {
            printf("waitpid() failed\n");
        }
        exit(0);
    }

    // wait example
    pid_t cpid;
    if (fork() == 0)
        exit(0);
    else
        cpid = wait(NULL);
    printf("Parent pid = %d\n", getpid());
    printf("Child pid = %d\n", cpid);

    // exit example
    printf("START");
    exit(0);
    printf("End of program");

    return 0;
}
